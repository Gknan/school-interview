package top100;

/*
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:

输入: [2,2,3,2]
输出: 3
示例 2:

输入: [0,1,0,1,0,1,99]
输出: 99


 */
public class SingleNumber_137 {

    public int singleNumber(int[] nums) {

        // 对于数字的每个位置，知可能是 3*k +0/1 个1 ，这个数字 模 3 的结果就是这个位置 的结果
        // 若 2 2 2 3 对于 10 10 10 11 第一个位置的 1 的个数是 4 保留1

        int ret = 0;
        for (int i = 0; i < 32; i++) {
            int sum = 0;
            for (int j = 0; j < nums.length; j++) {
//                sum += (nums[i] >>> 1) & 1;// 统计每个位置 1 的个数
                sum += (nums[j] >>> i) & 1;// 统计每个位置 1 的个数
            }
            ret |= (sum % 3) << i;
        }

        return ret;
    }
}
